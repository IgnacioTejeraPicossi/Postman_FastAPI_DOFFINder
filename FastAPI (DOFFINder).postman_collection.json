{
	"info": {
		"_postman_id": "d2c86b67-6d9b-4d2c-b701-a508fc8a8fcb",
		"name": "FastAPI (DOFFINder)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29105816"
	},
	"item": [
		{
			"name": "Get doffin notice by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 600ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(600);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"// Hent verdien fra en variabel\r",
							"let response = pm.response.json();   // Parse JSON-responsen\r",
							"// Henter f√∏rste objekt i arrayet og deretter 'id' feltet\r",
							"let notice_value = response[0].id;\r",
							"console.log(\"ID:\", notice_value);   // Skriv ut ID i konsollen\r",
							"\r",
							"// Sett verdien til collection-variabelen 'example_id'\r",
							"pm.collectionVariables.set(\"notice_id\", notice_value);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  \"2025-100194\",\r\n  \"2025-100184\",\r\n  \"2025-100195\"\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/doffin/notices",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"doffin",
						"notices"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Doffin Notice",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}api/doffin/notices?date=2025-01-02&limit=1000",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"doffin",
						"notices"
					],
					"query": [
						{
							"key": "date",
							"value": "2025-01-02"
						},
						{
							"key": "limit",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Doffin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}api/doffin/search?date=2025-01-02&limit=1000",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"doffin",
						"search"
					],
					"query": [
						{
							"key": "date",
							"value": "2025-01-02"
						},
						{
							"key": "limit",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notice Response model gtp-4o",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3900);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": \"string\",\r\n    \"heading\": \"string\",\r\n    \"description\": \"string\",\r\n    \"issueDate\": \"string\",\r\n    \"publicationDate\": \"string\",\r\n    \"deadline\": \"string\",\r\n    \"procedureMainFeatures\": \"string\"\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/models/{{model_key}}/evaluations",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"models",
						"{{model_key}}",
						"evaluations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notice Response model gtp-4o-mini",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": \"string\",\r\n    \"heading\": \"string\",\r\n    \"description\": \"string\",\r\n    \"issueDate\": \"string\",\r\n    \"publicationDate\": \"string\",\r\n    \"deadline\": \"string\",\r\n    \"procedureMainFeatures\": \"string\"\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/models/{{model_key2}}/evaluations",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"models",
						"{{model_key2}}",
						"evaluations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notice Response model gemini-1.5-flash",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": \"string\",\r\n    \"heading\": \"string\",\r\n    \"description\": \"string\",\r\n    \"issueDate\": \"string\",\r\n    \"publicationDate\": \"string\",\r\n    \"deadline\": \"string\",\r\n    \"procedureMainFeatures\": \"string\"\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/models/{{model_key3}}/evaluations",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"models",
						"{{model_key3}}",
						"evaluations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notice Response model granite-3-8b-instruct",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 2200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(2200);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": \"string\",\r\n    \"heading\": \"string\",\r\n    \"description\": \"string\",\r\n    \"issueDate\": \"string\",\r\n    \"publicationDate\": \"string\",\r\n    \"deadline\": \"string\",\r\n    \"procedureMainFeatures\": \"string\"\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/models/{{model_key4}}/evaluations",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"models",
						"{{model_key4}}",
						"evaluations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notice Response model llama3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 5000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": \"string\",\r\n    \"heading\": \"string\",\r\n    \"description\": \"string\",\r\n    \"issueDate\": \"string\",\r\n    \"publicationDate\": \"string\",\r\n    \"deadline\": \"string\",\r\n    \"procedureMainFeatures\": \"string\"\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/models/{{model_key5}}/evaluations",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"models",
						"{{model_key5}}",
						"evaluations"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Example Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1800);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/data/examples",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"data",
						"examples"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Example Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1800);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"// Hent verdien fra en variabel\r",
							"let response = pm.response.json();   // Parse JSON-responsen\r",
							"let example_value = response.id;     // Hent verdien av \"id\"\r",
							"console.log(\"ID:\", example_value);   // Skriv ut ID i konsollen\r",
							"\r",
							"// Sett verdien til collection-variabelen 'example_id'\r",
							"pm.collectionVariables.set(\"example_id\", example_value);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"string\",\r\n  \"raw_input\": \"string\",\r\n  \"raw_output\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/data/examples",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"data",
						"examples"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Example By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1800);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"string\",\r\n  \"raw_input\": \"string\",\r\n  \"raw_output\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/data/example/{{example_id}}",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"data",
						"example",
						"{{example_id}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Example Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1800);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/data/example/{{example_id}}",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"data",
						"example",
						"{{example_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Error Delete Example Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1800);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/data/example/{{example_id}}",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"data",
						"example",
						"{{example_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Example By Id  After Delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 404 'Not Found'\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1800ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1800);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\": \"string\",\r\n  \"raw_input\": \"string\",\r\n  \"raw_output\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}api/data/example/{{example_id}}",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"data",
						"example",
						"{{example_id}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Notices With Scores",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate that the response code should be 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 3000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"// Hent verdien fra en variabel\r",
							"let response = pm.response.json();   // Parse JSON-responsen\r",
							"let example_value = response.id;     // Hent verdien av \"id\"\r",
							"console.log(\"ID:\", example_value);   // Skriv ut ID i konsollen\r",
							"\r",
							"// Sett verdien til collection-variabelen 'example_id'\r",
							"pm.collectionVariables.set(\"example_id\", example_value);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"type": "file",
							"src": "postman-cloud:///1efe7a3b-9bf4-4420-b90c-c03e144782df"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}api/notices-with-scores",
					"host": [
						"{{baseUrl}}api"
					],
					"path": [
						"notices-with-scores"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8000/",
			"type": "string"
		},
		{
			"key": "model_key",
			"value": "gpt-4o",
			"type": "string"
		},
		{
			"key": "model_key2",
			"value": "gpt-4o-mini",
			"type": "string"
		},
		{
			"key": "example_id",
			"value": "Test",
			"type": "string"
		},
		{
			"key": "notice_id",
			"value": "test",
			"type": "string"
		},
		{
			"key": "model_key3",
			"value": "gemini-1.5-flash",
			"type": "string"
		},
		{
			"key": "model_key4",
			"value": "granite-3-8b-instruct",
			"type": "string"
		},
		{
			"key": "model_key5",
			"value": "llama3",
			"type": "string"
		}
	]
}